package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"regexp"
	"strconv"
)

func main() {
	file, err := os.Open("data.txt")
	if err != nil {
		fmt.Println(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)

	safeReports := 0

	for scanner.Scan() {
		reg := regexp.MustCompile("\\s+")
		input := reg.Split(scanner.Text(), -1)

		reportSafe, nums := ProcessReport(input)

		if reportSafe {
			safeReports++
		}
		fmt.Println(reportSafe, nums)
	}

	if err := scanner.Err(); err != nil {
		fmt.Println(err)
	}
	fmt.Println(safeReports)
}

func ProcessReport(input []string) (bool, [][]int) {
	dampenerSlot := -1
	nums := make([][]int, len(input))
	for i, v := range input {
		nums[i] = []int{0, 0}
		nums[i][0], _ = strconv.Atoi(v)
	}
	// handle diffs
	i := 1
DIFF:
	for i < len(nums) {
		var diff int
		diff = nums[i-1][0] - nums[i][0]
		nums[i][1] = diff

		// dampener used
		if dampenerSlot != -1 {
			if i == dampenerSlot+1 && dampenerSlot != 0 {
				diff = nums[i-2][0] - nums[i][0]
				nums[i][1] = diff
			} else if i == dampenerSlot+1 && dampenerSlot == 0 {
				diff = 1
				nums[i][1] = diff
			}
			if math.Abs(float64(diff)) > 3 || math.Abs(float64(diff)) < 1 && i != dampenerSlot {
				return false, nums
			}
		} else {
			// dampener not used
			if math.Abs(float64(diff)) > 3 || math.Abs(float64(diff)) < 1 {
				if len(nums) > i+1 && i == 1 {
					// edge case check
					shiftDiff := nums[i][0] - nums[i+1][0]
					if math.Abs(float64(shiftDiff)) < 3 && math.Abs(float64(shiftDiff)) > 0 {
						dampenerSlot = 0
						nums[1][1] = 0
						i = 1
						continue DIFF
					} else {
						dampenerSlot = i
						i = 1
						continue DIFF
					}
				} else {
					dampenerSlot = i
					i = 1
					continue DIFF

				}
			}
		}

		i++
	} // end diffs

	pos := 0
	neg := 0
	for _, v := range nums {
		if v[0] < 0 {
			pos++
		} else {
			neg++
		}
	}

	for i, _ := range nums {
		if nums[i][0] < 0 && neg < pos || nums[i][0] > -1 && pos > neg {
			if dampenerSlot != -1 {
				return false, nums
			} else {
				dampenerSlot = i
			}
		}
	}

	return true, nums
}

func AbsInt(i1 int, i2 int) int {
	if i1 > i2 {
		return i1 - i2
	}
	return i2 - i1
}
